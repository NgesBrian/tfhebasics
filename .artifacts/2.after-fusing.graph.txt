 %0 = _input_1                                                                                                         # EncryptedTensor<uint8, shape=(1, 1, 28, 28)>
 %1 = [[[[ -28 - ... 1  -76]]]]                                                                                        # ClearTensor<int8, shape=(32, 1, 3, 3)>                         @ /conv1/Conv.conv
 %2 = conv2d(%0, %1, [0 0 0 0 0 ... 0 0 0 0 0], pads=[0, 0, 0, 0], strides=(1, 1), dilations=(1, 1), group=1)          # EncryptedTensor<uint8, shape=(1, 32, 26, 26)>                  @ /conv1/Conv.conv
 %3 = round_bit_pattern(%2, lsbs_to_remove=13)                                                                         # EncryptedTensor<uint8, shape=(1, 32, 26, 26)>                  @ /conv1/Conv.conv_rounding
 %4 = astype(%3, dtype=float64)                                                                                        # EncryptedTensor<float64, shape=(1, 32, 26, 26)>
 %5 = 0                                                                                                                # ClearScalar<uint1>
 %6 = add(%4, %5)                                                                                                      # EncryptedTensor<float64, shape=(1, 32, 26, 26)>
 %7 = [[[[0]]  [ ... ]  [[0]]]]                                                                                        # ClearTensor<uint1, shape=(1, 32, 1, 1)>
 %8 = subtract(%6, %7)                                                                                                 # EncryptedTensor<float64, shape=(1, 32, 26, 26)>
 %9 = 0.002608647027353602                                                                                             # ClearScalar<float64>
%10 = multiply(%9, %8)                                                                                                 # EncryptedTensor<float64, shape=(1, 32, 26, 26)>
%11 = [[[[ 0.331 ... 048134]]]]                                                                                        # ClearTensor<float32, shape=(1, 32, 1, 1)>
%12 = add(%10, %11)                                                                                                    # EncryptedTensor<float64, shape=(1, 32, 26, 26)>
%13 = 0                                                                                                                # ClearScalar<uint1>
%14 = maximum(%12, %13)                                                                                                # EncryptedTensor<float64, shape=(1, 32, 26, 26)>
%15 = 1.5040270795359467                                                                                               # ClearScalar<float64>
%16 = divide(%14, %15)                                                                                                 # EncryptedTensor<float64, shape=(1, 32, 26, 26)>
%17 = 0                                                                                                                # ClearScalar<uint1>
%18 = add(%16, %17)                                                                                                    # EncryptedTensor<float64, shape=(1, 32, 26, 26)>
%19 = rint(%18)                                                                                                        # EncryptedTensor<float64, shape=(1, 32, 26, 26)>
%20 = 0                                                                                                                # ClearScalar<uint1>
%21 = 255                                                                                                              # ClearScalar<uint8>
%22 = clip(%19, %20, %21)                                                                                              # EncryptedTensor<float64, shape=(1, 32, 26, 26)>
%23 = astype(%22, dtype=int_)                                                                                          # EncryptedTensor<uint1, shape=(1, 32, 26, 26)>
%24 = [[[[  10   ... 9   14]]]]                                                                                        # ClearTensor<int8, shape=(64, 32, 3, 3)>                        @ /conv2/Conv.conv
%25 = conv2d(%23, %24, [0 0 0 0 0 ... 0 0 0 0 0], pads=[0, 0, 0, 0], strides=(1, 1), dilations=(1, 1), group=1)        # EncryptedTensor<uint1, shape=(1, 64, 24, 24)>                  @ /conv2/Conv.conv
%26 = round_bit_pattern(%25, lsbs_to_remove=13)                                                                        # EncryptedTensor<uint1, shape=(1, 64, 24, 24)>                  @ /conv2/Conv.conv_rounding
%27 = astype(%26, dtype=float64)                                                                                       # EncryptedTensor<float64, shape=(1, 64, 24, 24)>
%28 = 0                                                                                                                # ClearScalar<uint1>
%29 = add(%27, %28)                                                                                                    # EncryptedTensor<float64, shape=(1, 64, 24, 24)>
%30 = [[[[0]]  [ ... ]  [[0]]]]                                                                                        # ClearTensor<uint1, shape=(1, 64, 1, 1)>
%31 = subtract(%29, %30)                                                                                               # EncryptedTensor<float64, shape=(1, 64, 24, 24)>
%32 = 0.0006978204965024407                                                                                            # ClearScalar<float64>
%33 = multiply(%32, %31)                                                                                               # EncryptedTensor<float64, shape=(1, 64, 24, 24)>
%34 = [[[[-0.055 ... 015006]]]]                                                                                        # ClearTensor<float32, shape=(1, 64, 1, 1)>
%35 = add(%33, %34)                                                                                                    # EncryptedTensor<float64, shape=(1, 64, 24, 24)>
%36 = 0                                                                                                                # ClearScalar<uint1>
%37 = maximum(%35, %36)                                                                                                # EncryptedTensor<float64, shape=(1, 64, 24, 24)>
%38 = 0.5814819604531438                                                                                               # ClearScalar<float64>
%39 = divide(%37, %38)                                                                                                 # EncryptedTensor<float64, shape=(1, 64, 24, 24)>
%40 = 0                                                                                                                # ClearScalar<uint1>
%41 = add(%39, %40)                                                                                                    # EncryptedTensor<float64, shape=(1, 64, 24, 24)>
%42 = rint(%41)                                                                                                        # EncryptedTensor<float64, shape=(1, 64, 24, 24)>
%43 = 0                                                                                                                # ClearScalar<uint1>
%44 = 255                                                                                                              # ClearScalar<uint8>
%45 = clip(%42, %43, %44)                                                                                              # EncryptedTensor<float64, shape=(1, 64, 24, 24)>
%46 = astype(%45, dtype=int_)                                                                                          # EncryptedTensor<uint1, shape=(1, 64, 24, 24)>
%47 = [[[[  21   ... 3  123]]]]                                                                                        # ClearTensor<int8, shape=(64, 64, 3, 3)>                        @ /conv3/Conv.conv
%48 = conv2d(%46, %47, [0 0 0 0 0 ... 0 0 0 0 0], pads=[0, 0, 0, 0], strides=(3, 3), dilations=(1, 1), group=1)        # EncryptedTensor<uint1, shape=(1, 64, 8, 8)>                    @ /conv3/Conv.conv
%49 = round_bit_pattern(%48, lsbs_to_remove=14)                                                                        # EncryptedTensor<uint1, shape=(1, 64, 8, 8)>                    @ /conv3/Conv.conv_rounding
%50 = astype(%49, dtype=float64)                                                                                       # EncryptedTensor<float64, shape=(1, 64, 8, 8)>
%51 = 0                                                                                                                # ClearScalar<uint1>
%52 = add(%50, %51)                                                                                                    # EncryptedTensor<float64, shape=(1, 64, 8, 8)>
%53 = [[[[0]]  [ ... ]  [[0]]]]                                                                                        # ClearTensor<uint1, shape=(1, 64, 1, 1)>
%54 = subtract(%52, %53)                                                                                               # EncryptedTensor<float64, shape=(1, 64, 8, 8)>
%55 = 0.00019077487592422608                                                                                           # ClearScalar<float64>
%56 = multiply(%55, %54)                                                                                               # EncryptedTensor<float64, shape=(1, 64, 8, 8)>
%57 = [[[[-0.023 ... 334002]]]]                                                                                        # ClearTensor<float32, shape=(1, 64, 1, 1)>
%58 = add(%56, %57)                                                                                                    # EncryptedTensor<float64, shape=(1, 64, 8, 8)>
%59 = 0                                                                                                                # ClearScalar<uint1>
%60 = maximum(%58, %59)                                                                                                # EncryptedTensor<float64, shape=(1, 64, 8, 8)>
%61 = 0.3064128584809513                                                                                               # ClearScalar<float64>
%62 = divide(%60, %61)                                                                                                 # EncryptedTensor<float64, shape=(1, 64, 8, 8)>
%63 = 0                                                                                                                # ClearScalar<uint1>
%64 = add(%62, %63)                                                                                                    # EncryptedTensor<float64, shape=(1, 64, 8, 8)>
%65 = rint(%64)                                                                                                        # EncryptedTensor<float64, shape=(1, 64, 8, 8)>
%66 = 0                                                                                                                # ClearScalar<uint1>
%67 = 255                                                                                                              # ClearScalar<uint8>
%68 = clip(%65, %66, %67)                                                                                              # EncryptedTensor<float64, shape=(1, 64, 8, 8)>
%69 = astype(%68, dtype=int_)                                                                                          # EncryptedTensor<uint1, shape=(1, 64, 8, 8)>
%70 = reshape(%69, newshape=(1, 4096))                                                                                 # EncryptedTensor<uint1, shape=(1, 4096)>
%71 = 0.0                                                                                                              # ClearScalar<float64>
%72 = subtract(%70, %71)                                                                                               # EncryptedTensor<float64, shape=(1, 4096)>
%73 = 0.3064128584809513                                                                                               # ClearScalar<float64>
%74 = multiply(%73, %72)                                                                                               # EncryptedTensor<float64, shape=(1, 4096)>
%75 = 0                                                                                                                # ClearScalar<uint1>
%76 = maximum(%74, %75)                                                                                                # EncryptedTensor<float64, shape=(1, 4096)>
%77 = 0.3064128584809513                                                                                               # ClearScalar<float64>
%78 = divide(%76, %77)                                                                                                 # EncryptedTensor<float64, shape=(1, 4096)>
%79 = 0                                                                                                                # ClearScalar<uint1>
%80 = add(%78, %79)                                                                                                    # EncryptedTensor<float64, shape=(1, 4096)>
%81 = rint(%80)                                                                                                        # EncryptedTensor<float64, shape=(1, 4096)>
%82 = 0                                                                                                                # ClearScalar<uint1>
%83 = 255                                                                                                              # ClearScalar<uint8>
%84 = clip(%81, %82, %83)                                                                                              # EncryptedTensor<float64, shape=(1, 4096)>
%85 = astype(%84, dtype=int_)                                                                                          # EncryptedTensor<uint1, shape=(1, 4096)>
%86 = [[ -51   6 ...  42  -63]]                                                                                        # ClearTensor<int8, shape=(4096, 64)>                            @ /fc1/Gemm.matmul
%87 = matmul(%85, %86)                                                                                                 # EncryptedTensor<uint13, shape=(1, 64)>                         @ /fc1/Gemm.matmul
%88 = round_bit_pattern(%87, lsbs_to_remove=15)                                                                        # EncryptedTensor<uint13, shape=(1, 64)>                         @ /fc1/Gemm.matmul_rounding
%89 = subgraph(%88)                                                                                                    # EncryptedTensor<uint1, shape=(1, 64)>
%90 = [[ -64   1 ... 112   38]]                                                                                        # ClearTensor<int8, shape=(64, 10)>                              @ /fc2/Gemm.matmul
%91 = matmul(%89, %90)                                                                                                 # EncryptedTensor<uint7, shape=(1, 10)>                          @ /fc2/Gemm.matmul
return %91

Subgraphs:

    %89 = subgraph(%88):

         %0 = input                            # EncryptedTensor<uint13, shape=(1, 64)>         @ /fc1/Gemm.matmul_rounding
         %1 = astype(%0, dtype=float64)        # EncryptedTensor<float64, shape=(1, 64)>
         %2 = 0                                # ClearScalar<uint1>
         %3 = add(%1, %2)                      # EncryptedTensor<float64, shape=(1, 64)>
         %4 = [[0 0 0 0  ...  0 0 0 0]]        # ClearTensor<uint1, shape=(1, 64)>
         %5 = subtract(%3, %4)                 # EncryptedTensor<float64, shape=(1, 64)>
         %6 = 3.769815825764542e-05            # ClearScalar<float64>
         %7 = multiply(%6, %5)                 # EncryptedTensor<float64, shape=(1, 64)>
         %8 = [-0.001705 ... .00890442]        # ClearTensor<float32, shape=(64,)>
         %9 = add(%7, %8)                      # EncryptedTensor<float64, shape=(1, 64)>
        %10 = 0                                # ClearScalar<uint1>
        %11 = maximum(%9, %10)                 # EncryptedTensor<float64, shape=(1, 64)>
        %12 = 0.07267914270481482              # ClearScalar<float64>
        %13 = divide(%11, %12)                 # EncryptedTensor<float64, shape=(1, 64)>
        %14 = 0                                # ClearScalar<uint1>
        %15 = add(%13, %14)                    # EncryptedTensor<float64, shape=(1, 64)>
        %16 = rint(%15)                        # EncryptedTensor<float64, shape=(1, 64)>
        %17 = 0                                # ClearScalar<uint1>
        %18 = 255                              # ClearScalar<uint8>
        %19 = clip(%16, %17, %18)              # EncryptedTensor<float64, shape=(1, 64)>
        %20 = astype(%19, dtype=int_)          # EncryptedTensor<uint1, shape=(1, 64)>
        return %20
