 %0 = _input_1                                                                                                         # EncryptedTensor<uint8, shape=(1, 1, 28, 28)>         ∈ [0, 255]
 %1 = ones()                                                                                                           # EncryptedTensor<uint1, shape=(1, 1, 30, 30)>         ∈ [1, 1]
 %2 = 0                                                                                                                # ClearScalar<uint1>                                   ∈ [0, 0]
 %3 = multiply(%1, %2)                                                                                                 # EncryptedTensor<uint8, shape=(1, 1, 30, 30)>         ∈ [0, 255]
 %4 = (%3[:, :, 1:29, 1:29] = %0)                                                                                      # EncryptedTensor<uint8, shape=(1, 1, 30, 30)>         ∈ [0, 255]
 %5 = [[[[  13   ... 5  -23]]]]                                                                                        # ClearTensor<int8, shape=(32, 1, 3, 3)>               ∈ [-127, 124]              @ /conv1/Conv.conv
 %6 = conv2d(%4, %5, [0 0 0 0 0 ... 0 0 0 0 0], pads=[0, 0, 0, 0], strides=(1, 1), dilations=(1, 1), group=1)          # EncryptedTensor<int18, shape=(1, 32, 28, 28)>        ∈ [-91545, 97410]          @ /conv1/Conv.conv
 %7 = round_bit_pattern(%6, lsbs_to_remove=15)                                                                         # EncryptedTensor<int18, shape=(1, 32, 28, 28)>        ∈ [-98304, 98304]          @ /conv1/Conv.conv_rounding
 %8 = subgraph(%7)                                                                                                     # EncryptedTensor<uint8, shape=(1, 32, 28, 28)>        ∈ [0, 255]
 %9 = maxpool2d(%8, kernel_shape=(2, 2), strides=(2, 2), pads=(0, 0, 0, 0), dilations=(1, 1), ceil_mode=False)         # EncryptedTensor<uint8, shape=(1, 32, 14, 14)>        ∈ [0, 255]
%10 = subgraph(%9)                                                                                                     # EncryptedTensor<uint8, shape=(1, 32, 14, 14)>        ∈ [0, 255]
%11 = ones()                                                                                                           # EncryptedTensor<uint1, shape=(1, 32, 16, 16)>        ∈ [1, 1]
%12 = 0                                                                                                                # ClearScalar<uint1>                                   ∈ [0, 0]
%13 = multiply(%11, %12)                                                                                               # EncryptedTensor<uint8, shape=(1, 32, 16, 16)>        ∈ [0, 255]
%14 = (%13[:, :, 1:15, 1:15] = %10)                                                                                    # EncryptedTensor<uint8, shape=(1, 32, 16, 16)>        ∈ [0, 255]
%15 = [[[[-53 -5 ... -1 -15]]]]                                                                                        # ClearTensor<int8, shape=(64, 32, 3, 3)>              ∈ [-127, 95]               @ /conv2/Conv.conv
%16 = conv2d(%14, %15, [0 0 0 0 0 ... 0 0 0 0 0], pads=[0, 0, 0, 0], strides=(1, 1), dilations=(1, 1), group=1)        # EncryptedTensor<int20, shape=(1, 64, 14, 14)>        ∈ [-347052, 267285]        @ /conv2/Conv.conv
%17 = round_bit_pattern(%16, lsbs_to_remove=17)                                                                        # EncryptedTensor<int20, shape=(1, 64, 14, 14)>        ∈ [-393216, 262144]        @ /conv2/Conv.conv_rounding
%18 = subgraph(%17)                                                                                                    # EncryptedTensor<uint8, shape=(1, 64, 14, 14)>        ∈ [0, 254]
%19 = maxpool2d(%18, kernel_shape=(2, 2), strides=(2, 2), pads=(0, 0, 0, 0), dilations=(1, 1), ceil_mode=False)        # EncryptedTensor<uint8, shape=(1, 64, 7, 7)>          ∈ [0, 254]
%20 = subgraph(%19)                                                                                                    # EncryptedTensor<uint8, shape=(1, 64, 7, 7)>          ∈ [0, 254]
%21 = ones()                                                                                                           # EncryptedTensor<uint1, shape=(1, 64, 9, 9)>          ∈ [1, 1]
%22 = 0                                                                                                                # ClearScalar<uint1>                                   ∈ [0, 0]
%23 = multiply(%21, %22)                                                                                               # EncryptedTensor<uint8, shape=(1, 64, 9, 9)>          ∈ [0, 254]
%24 = (%23[:, :, 1:8, 1:8] = %20)                                                                                      # EncryptedTensor<uint8, shape=(1, 64, 9, 9)>          ∈ [0, 254]
%25 = [[[[ 26 -4 ... 14  36]]]]                                                                                        # ClearTensor<int8, shape=(64, 64, 3, 3)>              ∈ [-127, 111]              @ /conv3/Conv.conv
%26 = conv2d(%24, %25, [0 0 0 0 0 ... 0 0 0 0 0], pads=[0, 0, 0, 0], strides=(1, 1), dilations=(1, 1), group=1)        # EncryptedTensor<int20, shape=(1, 64, 7, 7)>          ∈ [-369189, 246253]        @ /conv3/Conv.conv
%27 = round_bit_pattern(%26, lsbs_to_remove=17)                                                                        # EncryptedTensor<int20, shape=(1, 64, 7, 7)>          ∈ [-393216, 262144]        @ /conv3/Conv.conv_rounding
%28 = subgraph(%27)                                                                                                    # EncryptedTensor<uint8, shape=(1, 64, 7, 7)>          ∈ [0, 255]
%29 = reshape(%28, newshape=[  -1 3136])                                                                               # EncryptedTensor<uint8, shape=(1, 3136)>              ∈ [0, 255]
%30 = [[  0  -8  ...   -4  -1]]                                                                                        # ClearTensor<int8, shape=(3136, 128)>                 ∈ [-118, 127]              @ /fc1/Gemm.matmul
%31 = matmul(%29, %30)                                                                                                 # EncryptedTensor<int19, shape=(1, 128)>               ∈ [-189060, 190841]        @ /fc1/Gemm.matmul
%32 = round_bit_pattern(%31, lsbs_to_remove=16)                                                                        # EncryptedTensor<int19, shape=(1, 128)>               ∈ [-196608, 196608]        @ /fc1/Gemm.matmul_rounding
%33 = subgraph(%32)                                                                                                    # EncryptedTensor<uint8, shape=(1, 128)>               ∈ [0, 255]
%34 = [[-56 -48  ...   41  -5]]                                                                                        # ClearTensor<int8, shape=(128, 10)>                   ∈ [-127, 92]               @ /fc2/Gemm.matmul
%35 = matmul(%33, %34)                                                                                                 # EncryptedTensor<int19, shape=(1, 10)>                ∈ [-100234, 143072]        @ /fc2/Gemm.matmul
return %35

Subgraphs:

    %8 = subgraph(%7):

         %0 = input                            # EncryptedTensor<uint1, shape=(1, 32, 28, 28)>          @ /conv1/Conv.conv_rounding
         %1 = astype(%0, dtype=float64)        # EncryptedTensor<float64, shape=(1, 32, 28, 28)>
         %2 = 0                                # ClearScalar<uint1>
         %3 = add(%1, %2)                      # EncryptedTensor<float64, shape=(1, 32, 28, 28)>
         %4 = [[[[0]]  [ ... ]  [[0]]]]        # ClearTensor<uint1, shape=(1, 32, 1, 1)>
         %5 = subtract(%3, %4)                 # EncryptedTensor<float64, shape=(1, 32, 28, 28)>
         %6 = 0.0037965509365862748            # ClearScalar<float64>
         %7 = multiply(%6, %5)                 # EncryptedTensor<float64, shape=(1, 32, 28, 28)>
         %8 = [[[[-0.208 ... 198912]]]]        # ClearTensor<float32, shape=(1, 32, 1, 1)>
         %9 = add(%7, %8)                      # EncryptedTensor<float64, shape=(1, 32, 28, 28)>
        %10 = 0                                # ClearScalar<uint1>
        %11 = maximum(%9, %10)                 # EncryptedTensor<float64, shape=(1, 32, 28, 28)>
        %12 = 1.4426253185570181               # ClearScalar<float64>
        %13 = divide(%11, %12)                 # EncryptedTensor<float64, shape=(1, 32, 28, 28)>
        %14 = 0                                # ClearScalar<uint1>
        %15 = add(%13, %14)                    # EncryptedTensor<float64, shape=(1, 32, 28, 28)>
        %16 = rint(%15)                        # EncryptedTensor<float64, shape=(1, 32, 28, 28)>
        %17 = 0                                # ClearScalar<uint1>
        %18 = 255                              # ClearScalar<uint8>
        %19 = clip(%16, %17, %18)              # EncryptedTensor<float64, shape=(1, 32, 28, 28)>
        %20 = astype(%19, dtype=int_)          # EncryptedTensor<uint1, shape=(1, 32, 28, 28)>
        return %20

    %10 = subgraph(%9):

         %0 = input                            # EncryptedTensor<uint1, shape=(1, 32, 14, 14)>
         %1 = astype(%0, dtype=float64)        # EncryptedTensor<float64, shape=(1, 32, 14, 14)>
         %2 = 0                                # ClearScalar<uint1>
         %3 = subtract(%1, %2)                 # EncryptedTensor<float64, shape=(1, 32, 14, 14)>
         %4 = 1.4426253185570181               # ClearScalar<float64>
         %5 = multiply(%3, %4)                 # EncryptedTensor<float64, shape=(1, 32, 14, 14)>
         %6 = 1.4426253185570181               # ClearScalar<float64>
         %7 = divide(%5, %6)                   # EncryptedTensor<float64, shape=(1, 32, 14, 14)>
         %8 = 0                                # ClearScalar<uint1>
         %9 = add(%7, %8)                      # EncryptedTensor<float64, shape=(1, 32, 14, 14)>
        %10 = rint(%9)                         # EncryptedTensor<float64, shape=(1, 32, 14, 14)>
        %11 = 0                                # ClearScalar<uint1>
        %12 = 255                              # ClearScalar<uint8>
        %13 = clip(%10, %11, %12)              # EncryptedTensor<float64, shape=(1, 32, 14, 14)>
        %14 = astype(%13, dtype=int_)          # EncryptedTensor<uint1, shape=(1, 32, 14, 14)>
        return %14

    %18 = subgraph(%17):

         %0 = input                            # EncryptedTensor<uint1, shape=(1, 64, 14, 14)>          @ /conv2/Conv.conv_rounding
         %1 = astype(%0, dtype=float64)        # EncryptedTensor<float64, shape=(1, 64, 14, 14)>
         %2 = 0                                # ClearScalar<uint1>
         %3 = add(%1, %2)                      # EncryptedTensor<float64, shape=(1, 64, 14, 14)>
         %4 = [[[[0]]  [ ... ]  [[0]]]]        # ClearTensor<uint1, shape=(1, 64, 1, 1)>
         %5 = subtract(%3, %4)                 # EncryptedTensor<float64, shape=(1, 64, 14, 14)>
         %6 = 0.0038814012566369674            # ClearScalar<float64>
         %7 = multiply(%6, %5)                 # EncryptedTensor<float64, shape=(1, 64, 14, 14)>
         %8 = [[[[-0.069 ... 750304]]]]        # ClearTensor<float32, shape=(1, 64, 1, 1)>
         %9 = add(%7, %8)                      # EncryptedTensor<float64, shape=(1, 64, 14, 14)>
        %10 = 0                                # ClearScalar<uint1>
        %11 = maximum(%9, %10)                 # EncryptedTensor<float64, shape=(1, 64, 14, 14)>
        %12 = 4.004583568817649                # ClearScalar<float64>
        %13 = divide(%11, %12)                 # EncryptedTensor<float64, shape=(1, 64, 14, 14)>
        %14 = 0                                # ClearScalar<uint1>
        %15 = add(%13, %14)                    # EncryptedTensor<float64, shape=(1, 64, 14, 14)>
        %16 = rint(%15)                        # EncryptedTensor<float64, shape=(1, 64, 14, 14)>
        %17 = 0                                # ClearScalar<uint1>
        %18 = 255                              # ClearScalar<uint8>
        %19 = clip(%16, %17, %18)              # EncryptedTensor<float64, shape=(1, 64, 14, 14)>
        %20 = astype(%19, dtype=int_)          # EncryptedTensor<uint1, shape=(1, 64, 14, 14)>
        return %20

    %20 = subgraph(%19):

         %0 = input                            # EncryptedTensor<uint1, shape=(1, 64, 7, 7)>
         %1 = astype(%0, dtype=float64)        # EncryptedTensor<float64, shape=(1, 64, 7, 7)>
         %2 = 0                                # ClearScalar<uint1>
         %3 = subtract(%1, %2)                 # EncryptedTensor<float64, shape=(1, 64, 7, 7)>
         %4 = 4.004583568817649                # ClearScalar<float64>
         %5 = multiply(%3, %4)                 # EncryptedTensor<float64, shape=(1, 64, 7, 7)>
         %6 = 4.004583568817649                # ClearScalar<float64>
         %7 = divide(%5, %6)                   # EncryptedTensor<float64, shape=(1, 64, 7, 7)>
         %8 = 0                                # ClearScalar<uint1>
         %9 = add(%7, %8)                      # EncryptedTensor<float64, shape=(1, 64, 7, 7)>
        %10 = rint(%9)                         # EncryptedTensor<float64, shape=(1, 64, 7, 7)>
        %11 = 0                                # ClearScalar<uint1>
        %12 = 255                              # ClearScalar<uint8>
        %13 = clip(%10, %11, %12)              # EncryptedTensor<float64, shape=(1, 64, 7, 7)>
        %14 = astype(%13, dtype=int_)          # EncryptedTensor<uint1, shape=(1, 64, 7, 7)>
        return %14

    %28 = subgraph(%27):

         %0 = input                            # EncryptedTensor<uint1, shape=(1, 64, 7, 7)>          @ /conv3/Conv.conv_rounding
         %1 = astype(%0, dtype=float64)        # EncryptedTensor<float64, shape=(1, 64, 7, 7)>
         %2 = 0                                # ClearScalar<uint1>
         %3 = add(%1, %2)                      # EncryptedTensor<float64, shape=(1, 64, 7, 7)>
         %4 = [[[[0]]  [ ... ]  [[0]]]]        # ClearTensor<uint1, shape=(1, 64, 1, 1)>
         %5 = subtract(%3, %4)                 # EncryptedTensor<float64, shape=(1, 64, 7, 7)>
         %6 = 0.009588433033854087             # ClearScalar<float64>
         %7 = multiply(%6, %5)                 # EncryptedTensor<float64, shape=(1, 64, 7, 7)>
         %8 = [[[[-0.005 ... 226756]]]]        # ClearTensor<float32, shape=(1, 64, 1, 1)>
         %9 = add(%7, %8)                      # EncryptedTensor<float64, shape=(1, 64, 7, 7)>
        %10 = 0                                # ClearScalar<uint1>
        %11 = maximum(%9, %10)                 # EncryptedTensor<float64, shape=(1, 64, 7, 7)>
        %12 = 9.197850140535706                # ClearScalar<float64>
        %13 = divide(%11, %12)                 # EncryptedTensor<float64, shape=(1, 64, 7, 7)>
        %14 = 0                                # ClearScalar<uint1>
        %15 = add(%13, %14)                    # EncryptedTensor<float64, shape=(1, 64, 7, 7)>
        %16 = rint(%15)                        # EncryptedTensor<float64, shape=(1, 64, 7, 7)>
        %17 = 0                                # ClearScalar<uint1>
        %18 = 255                              # ClearScalar<uint8>
        %19 = clip(%16, %17, %18)              # EncryptedTensor<float64, shape=(1, 64, 7, 7)>
        %20 = astype(%19, dtype=int_)          # EncryptedTensor<uint1, shape=(1, 64, 7, 7)>
        return %20

    %33 = subgraph(%32):

         %0 = input                            # EncryptedTensor<uint12, shape=(1, 128)>         @ /fc1/Gemm.matmul_rounding
         %1 = astype(%0, dtype=float64)        # EncryptedTensor<float64, shape=(1, 128)>
         %2 = 0                                # ClearScalar<uint1>
         %3 = add(%1, %2)                      # EncryptedTensor<float64, shape=(1, 128)>
         %4 = [[0 0 0 0  ...  0 0 0 0]]        # ClearTensor<uint1, shape=(1, 128)>
         %5 = subtract(%3, %4)                 # EncryptedTensor<float64, shape=(1, 128)>
         %6 = 0.023236426677982067             # ClearScalar<float64>
         %7 = multiply(%6, %5)                 # EncryptedTensor<float64, shape=(1, 128)>
         %8 = [ 0.026515 ... .02760445]        # ClearTensor<float32, shape=(128,)>
         %9 = add(%7, %8)                      # EncryptedTensor<float64, shape=(1, 128)>
        %10 = 0                                # ClearScalar<uint1>
        %11 = maximum(%9, %10)                 # EncryptedTensor<float64, shape=(1, 128)>
        %12 = 17.590286117538184               # ClearScalar<float64>
        %13 = divide(%11, %12)                 # EncryptedTensor<float64, shape=(1, 128)>
        %14 = 0                                # ClearScalar<uint1>
        %15 = add(%13, %14)                    # EncryptedTensor<float64, shape=(1, 128)>
        %16 = rint(%15)                        # EncryptedTensor<float64, shape=(1, 128)>
        %17 = 0                                # ClearScalar<uint1>
        %18 = 255                              # ClearScalar<uint8>
        %19 = clip(%16, %17, %18)              # EncryptedTensor<float64, shape=(1, 128)>
        %20 = astype(%19, dtype=int_)          # EncryptedTensor<uint1, shape=(1, 128)>
        return %20
