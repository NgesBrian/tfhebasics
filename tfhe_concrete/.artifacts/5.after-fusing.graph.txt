 %0 = _input_1                                                                                                         # EncryptedTensor<uint8, shape=(1, 1, 28, 28)>
 %1 = ones()                                                                                                           # EncryptedTensor<uint1, shape=(1, 1, 30, 30)>
 %2 = 0                                                                                                                # ClearScalar<uint1>
 %3 = multiply(%1, %2)                                                                                                 # EncryptedTensor<uint1, shape=(1, 1, 30, 30)>
 %4 = (%3[:, :, 1:29, 1:29] = %0)                                                                                      # EncryptedTensor<uint1, shape=(1, 1, 30, 30)>
 %5 = [[[[  13   ... 5  -23]]]]                                                                                        # ClearTensor<int8, shape=(32, 1, 3, 3)>                         @ /conv1/Conv.conv
 %6 = conv2d(%4, %5, [0 0 0 0 0 ... 0 0 0 0 0], pads=[0, 0, 0, 0], strides=(1, 1), dilations=(1, 1), group=1)          # EncryptedTensor<uint1, shape=(1, 32, 28, 28)>                  @ /conv1/Conv.conv
 %7 = round_bit_pattern(%6, lsbs_to_remove=15)                                                                         # EncryptedTensor<uint1, shape=(1, 32, 28, 28)>                  @ /conv1/Conv.conv_rounding
 %8 = astype(%7, dtype=float64)                                                                                        # EncryptedTensor<float64, shape=(1, 32, 28, 28)>
 %9 = 0                                                                                                                # ClearScalar<uint1>
%10 = add(%8, %9)                                                                                                      # EncryptedTensor<float64, shape=(1, 32, 28, 28)>
%11 = [[[[0]]  [ ... ]  [[0]]]]                                                                                        # ClearTensor<uint1, shape=(1, 32, 1, 1)>
%12 = subtract(%10, %11)                                                                                               # EncryptedTensor<float64, shape=(1, 32, 28, 28)>
%13 = 0.0037965509365862748                                                                                            # ClearScalar<float64>
%14 = multiply(%13, %12)                                                                                               # EncryptedTensor<float64, shape=(1, 32, 28, 28)>
%15 = [[[[-0.208 ... 198912]]]]                                                                                        # ClearTensor<float32, shape=(1, 32, 1, 1)>
%16 = add(%14, %15)                                                                                                    # EncryptedTensor<float64, shape=(1, 32, 28, 28)>
%17 = 0                                                                                                                # ClearScalar<uint1>
%18 = maximum(%16, %17)                                                                                                # EncryptedTensor<float64, shape=(1, 32, 28, 28)>
%19 = 1.4426253185570181                                                                                               # ClearScalar<float64>
%20 = divide(%18, %19)                                                                                                 # EncryptedTensor<float64, shape=(1, 32, 28, 28)>
%21 = 0                                                                                                                # ClearScalar<uint1>
%22 = add(%20, %21)                                                                                                    # EncryptedTensor<float64, shape=(1, 32, 28, 28)>
%23 = rint(%22)                                                                                                        # EncryptedTensor<float64, shape=(1, 32, 28, 28)>
%24 = 0                                                                                                                # ClearScalar<uint1>
%25 = 255                                                                                                              # ClearScalar<uint8>
%26 = clip(%23, %24, %25)                                                                                              # EncryptedTensor<float64, shape=(1, 32, 28, 28)>
%27 = astype(%26, dtype=int_)                                                                                          # EncryptedTensor<uint1, shape=(1, 32, 28, 28)>
%28 = maxpool2d(%27, kernel_shape=(2, 2), strides=(2, 2), pads=(0, 0, 0, 0), dilations=(1, 1), ceil_mode=False)        # EncryptedTensor<uint1, shape=(1, 32, 14, 14)>
%29 = astype(%28, dtype=float64)                                                                                       # EncryptedTensor<float64, shape=(1, 32, 14, 14)>
%30 = 0                                                                                                                # ClearScalar<uint1>
%31 = subtract(%29, %30)                                                                                               # EncryptedTensor<float64, shape=(1, 32, 14, 14)>
%32 = 1.4426253185570181                                                                                               # ClearScalar<float64>
%33 = multiply(%31, %32)                                                                                               # EncryptedTensor<float64, shape=(1, 32, 14, 14)>
%34 = 1.4426253185570181                                                                                               # ClearScalar<float64>
%35 = divide(%33, %34)                                                                                                 # EncryptedTensor<float64, shape=(1, 32, 14, 14)>
%36 = 0                                                                                                                # ClearScalar<uint1>
%37 = add(%35, %36)                                                                                                    # EncryptedTensor<float64, shape=(1, 32, 14, 14)>
%38 = rint(%37)                                                                                                        # EncryptedTensor<float64, shape=(1, 32, 14, 14)>
%39 = 0                                                                                                                # ClearScalar<uint1>
%40 = 255                                                                                                              # ClearScalar<uint8>
%41 = clip(%38, %39, %40)                                                                                              # EncryptedTensor<float64, shape=(1, 32, 14, 14)>
%42 = astype(%41, dtype=int_)                                                                                          # EncryptedTensor<uint1, shape=(1, 32, 14, 14)>
%43 = ones()                                                                                                           # EncryptedTensor<uint1, shape=(1, 32, 16, 16)>
%44 = 0                                                                                                                # ClearScalar<uint1>
%45 = multiply(%43, %44)                                                                                               # EncryptedTensor<uint1, shape=(1, 32, 16, 16)>
%46 = (%45[:, :, 1:15, 1:15] = %42)                                                                                    # EncryptedTensor<uint1, shape=(1, 32, 16, 16)>
%47 = [[[[-53 -5 ... -1 -15]]]]                                                                                        # ClearTensor<int8, shape=(64, 32, 3, 3)>                        @ /conv2/Conv.conv
%48 = conv2d(%46, %47, [0 0 0 0 0 ... 0 0 0 0 0], pads=[0, 0, 0, 0], strides=(1, 1), dilations=(1, 1), group=1)        # EncryptedTensor<uint1, shape=(1, 64, 14, 14)>                  @ /conv2/Conv.conv
%49 = round_bit_pattern(%48, lsbs_to_remove=17)                                                                        # EncryptedTensor<uint1, shape=(1, 64, 14, 14)>                  @ /conv2/Conv.conv_rounding
%50 = subgraph(%49)                                                                                                    # EncryptedTensor<uint1, shape=(1, 64, 14, 14)>
%51 = maxpool2d(%50, kernel_shape=(2, 2), strides=(2, 2), pads=(0, 0, 0, 0), dilations=(1, 1), ceil_mode=False)        # EncryptedTensor<uint1, shape=(1, 64, 7, 7)>
%52 = subgraph(%51)                                                                                                    # EncryptedTensor<uint1, shape=(1, 64, 7, 7)>
%53 = ones()                                                                                                           # EncryptedTensor<uint1, shape=(1, 64, 9, 9)>
%54 = 0                                                                                                                # ClearScalar<uint1>
%55 = multiply(%53, %54)                                                                                               # EncryptedTensor<uint1, shape=(1, 64, 9, 9)>
%56 = (%55[:, :, 1:8, 1:8] = %52)                                                                                      # EncryptedTensor<uint1, shape=(1, 64, 9, 9)>
%57 = [[[[ 26 -4 ... 14  36]]]]                                                                                        # ClearTensor<int8, shape=(64, 64, 3, 3)>                        @ /conv3/Conv.conv
%58 = conv2d(%56, %57, [0 0 0 0 0 ... 0 0 0 0 0], pads=[0, 0, 0, 0], strides=(1, 1), dilations=(1, 1), group=1)        # EncryptedTensor<uint1, shape=(1, 64, 7, 7)>                    @ /conv3/Conv.conv
%59 = round_bit_pattern(%58, lsbs_to_remove=17)                                                                        # EncryptedTensor<uint1, shape=(1, 64, 7, 7)>                    @ /conv3/Conv.conv_rounding
%60 = subgraph(%59)                                                                                                    # EncryptedTensor<uint1, shape=(1, 64, 7, 7)>
%61 = reshape(%60, newshape=[  -1 3136])                                                                               # EncryptedTensor<uint1, shape=(1, 3136)>
%62 = [[  0  -8  ...   -4  -1]]                                                                                        # ClearTensor<int8, shape=(3136, 128)>                           @ /fc1/Gemm.matmul
%63 = matmul(%61, %62)                                                                                                 # EncryptedTensor<uint12, shape=(1, 128)>                        @ /fc1/Gemm.matmul
%64 = round_bit_pattern(%63, lsbs_to_remove=16)                                                                        # EncryptedTensor<uint12, shape=(1, 128)>                        @ /fc1/Gemm.matmul_rounding
%65 = subgraph(%64)                                                                                                    # EncryptedTensor<uint1, shape=(1, 128)>
%66 = [[-56 -48  ...   41  -5]]                                                                                        # ClearTensor<int8, shape=(128, 10)>                             @ /fc2/Gemm.matmul
%67 = matmul(%65, %66)                                                                                                 # EncryptedTensor<uint8, shape=(1, 10)>                          @ /fc2/Gemm.matmul
return %67

Subgraphs:

    %50 = subgraph(%49):

         %0 = input                            # EncryptedTensor<uint1, shape=(1, 64, 14, 14)>          @ /conv2/Conv.conv_rounding
         %1 = astype(%0, dtype=float64)        # EncryptedTensor<float64, shape=(1, 64, 14, 14)>
         %2 = 0                                # ClearScalar<uint1>
         %3 = add(%1, %2)                      # EncryptedTensor<float64, shape=(1, 64, 14, 14)>
         %4 = [[[[0]]  [ ... ]  [[0]]]]        # ClearTensor<uint1, shape=(1, 64, 1, 1)>
         %5 = subtract(%3, %4)                 # EncryptedTensor<float64, shape=(1, 64, 14, 14)>
         %6 = 0.0038814012566369674            # ClearScalar<float64>
         %7 = multiply(%6, %5)                 # EncryptedTensor<float64, shape=(1, 64, 14, 14)>
         %8 = [[[[-0.069 ... 750304]]]]        # ClearTensor<float32, shape=(1, 64, 1, 1)>
         %9 = add(%7, %8)                      # EncryptedTensor<float64, shape=(1, 64, 14, 14)>
        %10 = 0                                # ClearScalar<uint1>
        %11 = maximum(%9, %10)                 # EncryptedTensor<float64, shape=(1, 64, 14, 14)>
        %12 = 4.004583568817649                # ClearScalar<float64>
        %13 = divide(%11, %12)                 # EncryptedTensor<float64, shape=(1, 64, 14, 14)>
        %14 = 0                                # ClearScalar<uint1>
        %15 = add(%13, %14)                    # EncryptedTensor<float64, shape=(1, 64, 14, 14)>
        %16 = rint(%15)                        # EncryptedTensor<float64, shape=(1, 64, 14, 14)>
        %17 = 0                                # ClearScalar<uint1>
        %18 = 255                              # ClearScalar<uint8>
        %19 = clip(%16, %17, %18)              # EncryptedTensor<float64, shape=(1, 64, 14, 14)>
        %20 = astype(%19, dtype=int_)          # EncryptedTensor<uint1, shape=(1, 64, 14, 14)>
        return %20

    %52 = subgraph(%51):

         %0 = input                            # EncryptedTensor<uint1, shape=(1, 64, 7, 7)>
         %1 = astype(%0, dtype=float64)        # EncryptedTensor<float64, shape=(1, 64, 7, 7)>
         %2 = 0                                # ClearScalar<uint1>
         %3 = subtract(%1, %2)                 # EncryptedTensor<float64, shape=(1, 64, 7, 7)>
         %4 = 4.004583568817649                # ClearScalar<float64>
         %5 = multiply(%3, %4)                 # EncryptedTensor<float64, shape=(1, 64, 7, 7)>
         %6 = 4.004583568817649                # ClearScalar<float64>
         %7 = divide(%5, %6)                   # EncryptedTensor<float64, shape=(1, 64, 7, 7)>
         %8 = 0                                # ClearScalar<uint1>
         %9 = add(%7, %8)                      # EncryptedTensor<float64, shape=(1, 64, 7, 7)>
        %10 = rint(%9)                         # EncryptedTensor<float64, shape=(1, 64, 7, 7)>
        %11 = 0                                # ClearScalar<uint1>
        %12 = 255                              # ClearScalar<uint8>
        %13 = clip(%10, %11, %12)              # EncryptedTensor<float64, shape=(1, 64, 7, 7)>
        %14 = astype(%13, dtype=int_)          # EncryptedTensor<uint1, shape=(1, 64, 7, 7)>
        return %14

    %60 = subgraph(%59):

         %0 = input                            # EncryptedTensor<uint1, shape=(1, 64, 7, 7)>          @ /conv3/Conv.conv_rounding
         %1 = astype(%0, dtype=float64)        # EncryptedTensor<float64, shape=(1, 64, 7, 7)>
         %2 = 0                                # ClearScalar<uint1>
         %3 = add(%1, %2)                      # EncryptedTensor<float64, shape=(1, 64, 7, 7)>
         %4 = [[[[0]]  [ ... ]  [[0]]]]        # ClearTensor<uint1, shape=(1, 64, 1, 1)>
         %5 = subtract(%3, %4)                 # EncryptedTensor<float64, shape=(1, 64, 7, 7)>
         %6 = 0.009588433033854087             # ClearScalar<float64>
         %7 = multiply(%6, %5)                 # EncryptedTensor<float64, shape=(1, 64, 7, 7)>
         %8 = [[[[-0.005 ... 226756]]]]        # ClearTensor<float32, shape=(1, 64, 1, 1)>
         %9 = add(%7, %8)                      # EncryptedTensor<float64, shape=(1, 64, 7, 7)>
        %10 = 0                                # ClearScalar<uint1>
        %11 = maximum(%9, %10)                 # EncryptedTensor<float64, shape=(1, 64, 7, 7)>
        %12 = 9.197850140535706                # ClearScalar<float64>
        %13 = divide(%11, %12)                 # EncryptedTensor<float64, shape=(1, 64, 7, 7)>
        %14 = 0                                # ClearScalar<uint1>
        %15 = add(%13, %14)                    # EncryptedTensor<float64, shape=(1, 64, 7, 7)>
        %16 = rint(%15)                        # EncryptedTensor<float64, shape=(1, 64, 7, 7)>
        %17 = 0                                # ClearScalar<uint1>
        %18 = 255                              # ClearScalar<uint8>
        %19 = clip(%16, %17, %18)              # EncryptedTensor<float64, shape=(1, 64, 7, 7)>
        %20 = astype(%19, dtype=int_)          # EncryptedTensor<uint1, shape=(1, 64, 7, 7)>
        return %20

    %65 = subgraph(%64):

         %0 = input                            # EncryptedTensor<uint12, shape=(1, 128)>         @ /fc1/Gemm.matmul_rounding
         %1 = astype(%0, dtype=float64)        # EncryptedTensor<float64, shape=(1, 128)>
         %2 = 0                                # ClearScalar<uint1>
         %3 = add(%1, %2)                      # EncryptedTensor<float64, shape=(1, 128)>
         %4 = [[0 0 0 0  ...  0 0 0 0]]        # ClearTensor<uint1, shape=(1, 128)>
         %5 = subtract(%3, %4)                 # EncryptedTensor<float64, shape=(1, 128)>
         %6 = 0.023236426677982067             # ClearScalar<float64>
         %7 = multiply(%6, %5)                 # EncryptedTensor<float64, shape=(1, 128)>
         %8 = [ 0.026515 ... .02760445]        # ClearTensor<float32, shape=(128,)>
         %9 = add(%7, %8)                      # EncryptedTensor<float64, shape=(1, 128)>
        %10 = 0                                # ClearScalar<uint1>
        %11 = maximum(%9, %10)                 # EncryptedTensor<float64, shape=(1, 128)>
        %12 = 17.590286117538184               # ClearScalar<float64>
        %13 = divide(%11, %12)                 # EncryptedTensor<float64, shape=(1, 128)>
        %14 = 0                                # ClearScalar<uint1>
        %15 = add(%13, %14)                    # EncryptedTensor<float64, shape=(1, 128)>
        %16 = rint(%15)                        # EncryptedTensor<float64, shape=(1, 128)>
        %17 = 0                                # ClearScalar<uint1>
        %18 = 255                              # ClearScalar<uint8>
        %19 = clip(%16, %17, %18)              # EncryptedTensor<float64, shape=(1, 128)>
        %20 = astype(%19, dtype=int_)          # EncryptedTensor<uint1, shape=(1, 128)>
        return %20
