 %0 = _input_1                                                                                                         # EncryptedTensor<uint8, shape=(1, 1, 28, 28)>
 %1 = [[[[  35   ... 6  -57]]]]                                                                                        # ClearTensor<int8, shape=(32, 1, 3, 3)>                         @ /conv1/Conv.conv
 %2 = conv2d(%0, %1, [0 0 0 0 0 ... 0 0 0 0 0], pads=[0, 0, 0, 0], strides=(1, 1), dilations=(1, 1), group=1)          # EncryptedTensor<uint8, shape=(1, 32, 26, 26)>                  @ /conv1/Conv.conv
 %3 = round_bit_pattern(%2, lsbs_to_remove=13)                                                                         # EncryptedTensor<uint8, shape=(1, 32, 26, 26)>                  @ /conv1/Conv.conv_rounding
 %4 = astype(%3, dtype=float64)                                                                                        # EncryptedTensor<float64, shape=(1, 32, 26, 26)>
 %5 = 0                                                                                                                # ClearScalar<uint1>
 %6 = add(%4, %5)                                                                                                      # EncryptedTensor<float64, shape=(1, 32, 26, 26)>
 %7 = [[[[0]]  [ ... ]  [[0]]]]                                                                                        # ClearTensor<uint1, shape=(1, 32, 1, 1)>
 %8 = subtract(%6, %7)                                                                                                 # EncryptedTensor<float64, shape=(1, 32, 26, 26)>
 %9 = 0.00415700720989798                                                                                              # ClearScalar<float64>
%10 = multiply(%9, %8)                                                                                                 # EncryptedTensor<float64, shape=(1, 32, 26, 26)>
%11 = [[[[-0.004 ... 167757]]]]                                                                                        # ClearTensor<float32, shape=(1, 32, 1, 1)>
%12 = add(%10, %11)                                                                                                    # EncryptedTensor<float64, shape=(1, 32, 26, 26)>
%13 = 0                                                                                                                # ClearScalar<uint1>
%14 = maximum(%12, %13)                                                                                                # EncryptedTensor<float64, shape=(1, 32, 26, 26)>
%15 = 1.3333002460762136                                                                                               # ClearScalar<float64>
%16 = divide(%14, %15)                                                                                                 # EncryptedTensor<float64, shape=(1, 32, 26, 26)>
%17 = 0                                                                                                                # ClearScalar<uint1>
%18 = add(%16, %17)                                                                                                    # EncryptedTensor<float64, shape=(1, 32, 26, 26)>
%19 = rint(%18)                                                                                                        # EncryptedTensor<float64, shape=(1, 32, 26, 26)>
%20 = 0                                                                                                                # ClearScalar<uint1>
%21 = 255                                                                                                              # ClearScalar<uint8>
%22 = clip(%19, %20, %21)                                                                                              # EncryptedTensor<float64, shape=(1, 32, 26, 26)>
%23 = astype(%22, dtype=int_)                                                                                          # EncryptedTensor<uint1, shape=(1, 32, 26, 26)>
%24 = [[[[ -15   ... 2  -18]]]]                                                                                        # ClearTensor<int8, shape=(64, 32, 3, 3)>                        @ /conv2/Conv.conv
%25 = conv2d(%23, %24, [0 0 0 0 0 ... 0 0 0 0 0], pads=[0, 0, 0, 0], strides=(1, 1), dilations=(1, 1), group=1)        # EncryptedTensor<uint1, shape=(1, 64, 24, 24)>                  @ /conv2/Conv.conv
%26 = round_bit_pattern(%25, lsbs_to_remove=15)                                                                        # EncryptedTensor<uint1, shape=(1, 64, 24, 24)>                  @ /conv2/Conv.conv_rounding
%27 = subgraph(%26)                                                                                                    # EncryptedTensor<uint1, shape=(1, 64, 24, 24)>
%28 = [[[[-38  2 ... -2  -3]]]]                                                                                        # ClearTensor<int8, shape=(64, 64, 3, 3)>                        @ /conv3/Conv.conv
%29 = conv2d(%27, %28, [0 0 0 0 0 ... 0 0 0 0 0], pads=[0, 0, 0, 0], strides=(3, 3), dilations=(1, 1), group=1)        # EncryptedTensor<uint1, shape=(1, 64, 8, 8)>                    @ /conv3/Conv.conv
%30 = round_bit_pattern(%29, lsbs_to_remove=15)                                                                        # EncryptedTensor<uint1, shape=(1, 64, 8, 8)>                    @ /conv3/Conv.conv_rounding
%31 = subgraph(%30)                                                                                                    # EncryptedTensor<uint1, shape=(1, 64, 8, 8)>
%32 = reshape(%31, newshape=(1, 4096))                                                                                 # EncryptedTensor<uint1, shape=(1, 4096)>
%33 = subgraph(%32)                                                                                                    # EncryptedTensor<uint1, shape=(1, 4096)>
%34 = [[  1 -18  ...    9  -1]]                                                                                        # ClearTensor<int8, shape=(4096, 64)>                            @ /fc1/Gemm.matmul
%35 = matmul(%33, %34)                                                                                                 # EncryptedTensor<uint13, shape=(1, 64)>                         @ /fc1/Gemm.matmul
%36 = round_bit_pattern(%35, lsbs_to_remove=15)                                                                        # EncryptedTensor<uint13, shape=(1, 64)>                         @ /fc1/Gemm.matmul_rounding
%37 = subgraph(%36)                                                                                                    # EncryptedTensor<uint1, shape=(1, 64)>
%38 = [[ -86  -3 ...  46  -35]]                                                                                        # ClearTensor<int8, shape=(64, 10)>                              @ /fc2/Gemm.matmul
%39 = matmul(%37, %38)                                                                                                 # EncryptedTensor<uint7, shape=(1, 10)>                          @ /fc2/Gemm.matmul
return %39

Subgraphs:

    %27 = subgraph(%26):

         %0 = input                            # EncryptedTensor<uint1, shape=(1, 64, 24, 24)>          @ /conv2/Conv.conv_rounding
         %1 = astype(%0, dtype=float64)        # EncryptedTensor<float64, shape=(1, 64, 24, 24)>
         %2 = 0                                # ClearScalar<uint1>
         %3 = add(%1, %2)                      # EncryptedTensor<float64, shape=(1, 64, 24, 24)>
         %4 = [[[[0]]  [ ... ]  [[0]]]]        # ClearTensor<uint1, shape=(1, 64, 1, 1)>
         %5 = subtract(%3, %4)                 # EncryptedTensor<float64, shape=(1, 64, 24, 24)>
         %6 = 0.003760448198400401             # ClearScalar<float64>
         %7 = multiply(%6, %5)                 # EncryptedTensor<float64, shape=(1, 64, 24, 24)>
         %8 = [[[[-0.035 ... 225825]]]]        # ClearTensor<float32, shape=(1, 64, 1, 1)>
         %9 = add(%7, %8)                      # EncryptedTensor<float64, shape=(1, 64, 24, 24)>
        %10 = 0                                # ClearScalar<uint1>
        %11 = maximum(%9, %10)                 # EncryptedTensor<float64, shape=(1, 64, 24, 24)>
        %12 = 3.3831956926019355               # ClearScalar<float64>
        %13 = divide(%11, %12)                 # EncryptedTensor<float64, shape=(1, 64, 24, 24)>
        %14 = 0                                # ClearScalar<uint1>
        %15 = add(%13, %14)                    # EncryptedTensor<float64, shape=(1, 64, 24, 24)>
        %16 = rint(%15)                        # EncryptedTensor<float64, shape=(1, 64, 24, 24)>
        %17 = 0                                # ClearScalar<uint1>
        %18 = 255                              # ClearScalar<uint8>
        %19 = clip(%16, %17, %18)              # EncryptedTensor<float64, shape=(1, 64, 24, 24)>
        %20 = astype(%19, dtype=int_)          # EncryptedTensor<uint1, shape=(1, 64, 24, 24)>
        return %20

    %31 = subgraph(%30):

         %0 = input                            # EncryptedTensor<uint1, shape=(1, 64, 8, 8)>          @ /conv3/Conv.conv_rounding
         %1 = astype(%0, dtype=float64)        # EncryptedTensor<float64, shape=(1, 64, 8, 8)>
         %2 = 0                                # ClearScalar<uint1>
         %3 = add(%1, %2)                      # EncryptedTensor<float64, shape=(1, 64, 8, 8)>
         %4 = [[[[0]]  [ ... ]  [[0]]]]        # ClearTensor<uint1, shape=(1, 64, 1, 1)>
         %5 = subtract(%3, %4)                 # EncryptedTensor<float64, shape=(1, 64, 8, 8)>
         %6 = 0.008967681946728015             # ClearScalar<float64>
         %7 = multiply(%6, %5)                 # EncryptedTensor<float64, shape=(1, 64, 8, 8)>
         %8 = [[[[ 0.032 ... 946586]]]]        # ClearTensor<float32, shape=(1, 64, 1, 1)>
         %9 = add(%7, %8)                      # EncryptedTensor<float64, shape=(1, 64, 8, 8)>
        %10 = 0                                # ClearScalar<uint1>
        %11 = maximum(%9, %10)                 # EncryptedTensor<float64, shape=(1, 64, 8, 8)>
        %12 = 8.749166351592951                # ClearScalar<float64>
        %13 = divide(%11, %12)                 # EncryptedTensor<float64, shape=(1, 64, 8, 8)>
        %14 = 0                                # ClearScalar<uint1>
        %15 = add(%13, %14)                    # EncryptedTensor<float64, shape=(1, 64, 8, 8)>
        %16 = rint(%15)                        # EncryptedTensor<float64, shape=(1, 64, 8, 8)>
        %17 = 0                                # ClearScalar<uint1>
        %18 = 255                              # ClearScalar<uint8>
        %19 = clip(%16, %17, %18)              # EncryptedTensor<float64, shape=(1, 64, 8, 8)>
        %20 = astype(%19, dtype=int_)          # EncryptedTensor<uint1, shape=(1, 64, 8, 8)>
        return %20

    %33 = subgraph(%32):

         %0 = input                          # EncryptedTensor<uint1, shape=(1, 4096)>
         %1 = 0.0                            # ClearScalar<float64>
         %2 = subtract(%0, %1)               # EncryptedTensor<float64, shape=(1, 4096)>
         %3 = 8.749166351592951              # ClearScalar<float64>
         %4 = multiply(%3, %2)               # EncryptedTensor<float64, shape=(1, 4096)>
         %5 = 0                              # ClearScalar<uint1>
         %6 = maximum(%4, %5)                # EncryptedTensor<float64, shape=(1, 4096)>
         %7 = 8.749166351592951              # ClearScalar<float64>
         %8 = divide(%6, %7)                 # EncryptedTensor<float64, shape=(1, 4096)>
         %9 = 0                              # ClearScalar<uint1>
        %10 = add(%8, %9)                    # EncryptedTensor<float64, shape=(1, 4096)>
        %11 = rint(%10)                      # EncryptedTensor<float64, shape=(1, 4096)>
        %12 = 0                              # ClearScalar<uint1>
        %13 = 255                            # ClearScalar<uint8>
        %14 = clip(%11, %12, %13)            # EncryptedTensor<float64, shape=(1, 4096)>
        %15 = astype(%14, dtype=int_)        # EncryptedTensor<uint1, shape=(1, 4096)>
        return %15

    %37 = subgraph(%36):

         %0 = input                            # EncryptedTensor<uint13, shape=(1, 64)>         @ /fc1/Gemm.matmul_rounding
         %1 = astype(%0, dtype=float64)        # EncryptedTensor<float64, shape=(1, 64)>
         %2 = 0                                # ClearScalar<uint1>
         %3 = add(%1, %2)                      # EncryptedTensor<float64, shape=(1, 64)>
         %4 = [[0 0 0 0  ...  0 0 0 0]]        # ClearTensor<uint1, shape=(1, 64)>
         %5 = subtract(%3, %4)                 # EncryptedTensor<float64, shape=(1, 64)>
         %6 = 0.02162406171045784              # ClearScalar<float64>
         %7 = multiply(%6, %5)                 # EncryptedTensor<float64, shape=(1, 64)>
         %8 = [ 7.724416 ... 78932e-02]        # ClearTensor<float32, shape=(64,)>
         %9 = add(%7, %8)                      # EncryptedTensor<float64, shape=(1, 64)>
        %10 = 0                                # ClearScalar<uint1>
        %11 = maximum(%9, %10)                 # EncryptedTensor<float64, shape=(1, 64)>
        %12 = 24.735392112190404               # ClearScalar<float64>
        %13 = divide(%11, %12)                 # EncryptedTensor<float64, shape=(1, 64)>
        %14 = 0                                # ClearScalar<uint1>
        %15 = add(%13, %14)                    # EncryptedTensor<float64, shape=(1, 64)>
        %16 = rint(%15)                        # EncryptedTensor<float64, shape=(1, 64)>
        %17 = 0                                # ClearScalar<uint1>
        %18 = 255                              # ClearScalar<uint8>
        %19 = clip(%16, %17, %18)              # EncryptedTensor<float64, shape=(1, 64)>
        %20 = astype(%19, dtype=int_)          # EncryptedTensor<uint1, shape=(1, 64)>
        return %20
