 %0 = _input_1                                                                                                         # EncryptedTensor<uint8, shape=(1, 1, 28, 28)>
 %1 = [[[[ -93   ... 8   24]]]]                                                                                        # ClearTensor<int8, shape=(32, 1, 3, 3)>                         @ /conv1/Conv.conv
 %2 = conv2d(%0, %1, [0 0 0 0 0 ... 0 0 0 0 0], pads=[0, 0, 0, 0], strides=(1, 1), dilations=(1, 1), group=1)          # EncryptedTensor<uint8, shape=(1, 32, 26, 26)>                  @ /conv1/Conv.conv
 %3 = round_bit_pattern(%2, lsbs_to_remove=12)                                                                         # EncryptedTensor<uint8, shape=(1, 32, 26, 26)>                  @ /conv1/Conv.conv_rounding
 %4 = astype(%3, dtype=float64)                                                                                        # EncryptedTensor<float64, shape=(1, 32, 26, 26)>
 %5 = 0                                                                                                                # ClearScalar<uint1>
 %6 = add(%4, %5)                                                                                                      # EncryptedTensor<float64, shape=(1, 32, 26, 26)>
 %7 = [[[[0]]  [ ... ]  [[0]]]]                                                                                        # ClearTensor<uint1, shape=(1, 32, 1, 1)>
 %8 = subtract(%6, %7)                                                                                                 # EncryptedTensor<float64, shape=(1, 32, 26, 26)>
 %9 = 0.0035210216608573134                                                                                            # ClearScalar<float64>
%10 = multiply(%9, %8)                                                                                                 # EncryptedTensor<float64, shape=(1, 32, 26, 26)>
%11 = [[[[ 0.040 ... 412512]]]]                                                                                        # ClearTensor<float32, shape=(1, 32, 1, 1)>
%12 = add(%10, %11)                                                                                                    # EncryptedTensor<float64, shape=(1, 32, 26, 26)>
%13 = 0                                                                                                                # ClearScalar<uint1>
%14 = maximum(%12, %13)                                                                                                # EncryptedTensor<float64, shape=(1, 32, 26, 26)>
%15 = 1.1763610513291907                                                                                               # ClearScalar<float64>
%16 = divide(%14, %15)                                                                                                 # EncryptedTensor<float64, shape=(1, 32, 26, 26)>
%17 = 0                                                                                                                # ClearScalar<uint1>
%18 = add(%16, %17)                                                                                                    # EncryptedTensor<float64, shape=(1, 32, 26, 26)>
%19 = rint(%18)                                                                                                        # EncryptedTensor<float64, shape=(1, 32, 26, 26)>
%20 = 0                                                                                                                # ClearScalar<uint1>
%21 = 255                                                                                                              # ClearScalar<uint8>
%22 = clip(%19, %20, %21)                                                                                              # EncryptedTensor<float64, shape=(1, 32, 26, 26)>
%23 = astype(%22, dtype=int_)                                                                                          # EncryptedTensor<uint1, shape=(1, 32, 26, 26)>
%24 = [[[[ 29    ... -4  14]]]]                                                                                        # ClearTensor<int8, shape=(64, 32, 3, 3)>                        @ /conv2/Conv.conv
%25 = conv2d(%23, %24, [0 0 0 0 0 ... 0 0 0 0 0], pads=[0, 0, 0, 0], strides=(1, 1), dilations=(1, 1), group=1)        # EncryptedTensor<uint1, shape=(1, 64, 24, 24)>                  @ /conv2/Conv.conv
%26 = round_bit_pattern(%25, lsbs_to_remove=13)                                                                        # EncryptedTensor<uint1, shape=(1, 64, 24, 24)>                  @ /conv2/Conv.conv_rounding
%27 = astype(%26, dtype=float64)                                                                                       # EncryptedTensor<float64, shape=(1, 64, 24, 24)>
%28 = 0                                                                                                                # ClearScalar<uint1>
%29 = add(%27, %28)                                                                                                    # EncryptedTensor<float64, shape=(1, 64, 24, 24)>
%30 = [[[[0]]  [ ... ]  [[0]]]]                                                                                        # ClearTensor<uint1, shape=(1, 64, 1, 1)>
%31 = subtract(%29, %30)                                                                                               # EncryptedTensor<float64, shape=(1, 64, 24, 24)>
%32 = 0.004955703689136662                                                                                             # ClearScalar<float64>
%33 = multiply(%32, %31)                                                                                               # EncryptedTensor<float64, shape=(1, 64, 24, 24)>
%34 = [[[[-0.000 ... 262951]]]]                                                                                        # ClearTensor<float32, shape=(1, 64, 1, 1)>
%35 = add(%33, %34)                                                                                                    # EncryptedTensor<float64, shape=(1, 64, 24, 24)>
%36 = 0                                                                                                                # ClearScalar<uint1>
%37 = maximum(%35, %36)                                                                                                # EncryptedTensor<float64, shape=(1, 64, 24, 24)>
%38 = 2.8376340177715007                                                                                               # ClearScalar<float64>
%39 = divide(%37, %38)                                                                                                 # EncryptedTensor<float64, shape=(1, 64, 24, 24)>
%40 = 0                                                                                                                # ClearScalar<uint1>
%41 = add(%39, %40)                                                                                                    # EncryptedTensor<float64, shape=(1, 64, 24, 24)>
%42 = rint(%41)                                                                                                        # EncryptedTensor<float64, shape=(1, 64, 24, 24)>
%43 = 0                                                                                                                # ClearScalar<uint1>
%44 = 255                                                                                                              # ClearScalar<uint8>
%45 = clip(%42, %43, %44)                                                                                              # EncryptedTensor<float64, shape=(1, 64, 24, 24)>
%46 = astype(%45, dtype=int_)                                                                                          # EncryptedTensor<uint1, shape=(1, 64, 24, 24)>
%47 = [[[[  1    ...  1  11]]]]                                                                                        # ClearTensor<int8, shape=(64, 64, 3, 3)>                        @ /conv3/Conv.conv
%48 = conv2d(%46, %47, [0 0 0 0 0 ... 0 0 0 0 0], pads=[0, 0, 0, 0], strides=(3, 3), dilations=(1, 1), group=1)        # EncryptedTensor<uint1, shape=(1, 64, 8, 8)>                    @ /conv3/Conv.conv
%49 = round_bit_pattern(%48, lsbs_to_remove=14)                                                                        # EncryptedTensor<uint1, shape=(1, 64, 8, 8)>                    @ /conv3/Conv.conv_rounding
%50 = subgraph(%49)                                                                                                    # EncryptedTensor<uint1, shape=(1, 64, 8, 8)>
%51 = reshape(%50, newshape=(1, 4096))                                                                                 # EncryptedTensor<uint1, shape=(1, 4096)>
%52 = subgraph(%51)                                                                                                    # EncryptedTensor<uint1, shape=(1, 4096)>
%53 = [[  2   4  ...   -2   8]]                                                                                        # ClearTensor<int8, shape=(4096, 64)>                            @ /fc1/Gemm.matmul
%54 = matmul(%52, %53)                                                                                                 # EncryptedTensor<uint13, shape=(1, 64)>                         @ /fc1/Gemm.matmul
%55 = round_bit_pattern(%54, lsbs_to_remove=14)                                                                        # EncryptedTensor<uint13, shape=(1, 64)>                         @ /fc1/Gemm.matmul_rounding
%56 = subgraph(%55)                                                                                                    # EncryptedTensor<uint1, shape=(1, 64)>
%57 = [[  10   2 ... -40  -39]]                                                                                        # ClearTensor<int8, shape=(64, 10)>                              @ /fc2/Gemm.matmul
%58 = matmul(%56, %57)                                                                                                 # EncryptedTensor<uint7, shape=(1, 10)>                          @ /fc2/Gemm.matmul
return %58

Subgraphs:

    %50 = subgraph(%49):

         %0 = input                            # EncryptedTensor<uint1, shape=(1, 64, 8, 8)>          @ /conv3/Conv.conv_rounding
         %1 = astype(%0, dtype=float64)        # EncryptedTensor<float64, shape=(1, 64, 8, 8)>
         %2 = 0                                # ClearScalar<uint1>
         %3 = add(%1, %2)                      # EncryptedTensor<float64, shape=(1, 64, 8, 8)>
         %4 = [[[[0]]  [ ... ]  [[0]]]]        # ClearTensor<uint1, shape=(1, 64, 1, 1)>
         %5 = subtract(%3, %4)                 # EncryptedTensor<float64, shape=(1, 64, 8, 8)>
         %6 = 0.009192228419825126             # ClearScalar<float64>
         %7 = multiply(%6, %5)                 # EncryptedTensor<float64, shape=(1, 64, 8, 8)>
         %8 = [[[[ 0.026 ... 679066]]]]        # ClearTensor<float32, shape=(1, 64, 1, 1)>
         %9 = add(%7, %8)                      # EncryptedTensor<float64, shape=(1, 64, 8, 8)>
        %10 = 0                                # ClearScalar<uint1>
        %11 = maximum(%9, %10)                 # EncryptedTensor<float64, shape=(1, 64, 8, 8)>
        %12 = 7.464029778967499                # ClearScalar<float64>
        %13 = divide(%11, %12)                 # EncryptedTensor<float64, shape=(1, 64, 8, 8)>
        %14 = 0                                # ClearScalar<uint1>
        %15 = add(%13, %14)                    # EncryptedTensor<float64, shape=(1, 64, 8, 8)>
        %16 = rint(%15)                        # EncryptedTensor<float64, shape=(1, 64, 8, 8)>
        %17 = 0                                # ClearScalar<uint1>
        %18 = 255                              # ClearScalar<uint8>
        %19 = clip(%16, %17, %18)              # EncryptedTensor<float64, shape=(1, 64, 8, 8)>
        %20 = astype(%19, dtype=int_)          # EncryptedTensor<uint1, shape=(1, 64, 8, 8)>
        return %20

    %52 = subgraph(%51):

         %0 = input                          # EncryptedTensor<uint1, shape=(1, 4096)>
         %1 = 0.0                            # ClearScalar<float64>
         %2 = subtract(%0, %1)               # EncryptedTensor<float64, shape=(1, 4096)>
         %3 = 7.464029778967499              # ClearScalar<float64>
         %4 = multiply(%3, %2)               # EncryptedTensor<float64, shape=(1, 4096)>
         %5 = 0                              # ClearScalar<uint1>
         %6 = maximum(%4, %5)                # EncryptedTensor<float64, shape=(1, 4096)>
         %7 = 7.464029778967499              # ClearScalar<float64>
         %8 = divide(%6, %7)                 # EncryptedTensor<float64, shape=(1, 4096)>
         %9 = 0                              # ClearScalar<uint1>
        %10 = add(%8, %9)                    # EncryptedTensor<float64, shape=(1, 4096)>
        %11 = rint(%10)                      # EncryptedTensor<float64, shape=(1, 4096)>
        %12 = 0                              # ClearScalar<uint1>
        %13 = 255                            # ClearScalar<uint8>
        %14 = clip(%11, %12, %13)            # EncryptedTensor<float64, shape=(1, 4096)>
        %15 = astype(%14, dtype=int_)        # EncryptedTensor<uint1, shape=(1, 4096)>
        return %15

    %56 = subgraph(%55):

         %0 = input                            # EncryptedTensor<uint13, shape=(1, 64)>         @ /fc1/Gemm.matmul_rounding
         %1 = astype(%0, dtype=float64)        # EncryptedTensor<float64, shape=(1, 64)>
         %2 = 0                                # ClearScalar<uint1>
         %3 = add(%1, %2)                      # EncryptedTensor<float64, shape=(1, 64)>
         %4 = [[0 0 0 0  ...  0 0 0 0]]        # ClearTensor<uint1, shape=(1, 64)>
         %5 = subtract(%3, %4)                 # EncryptedTensor<float64, shape=(1, 64)>
         %6 = 0.020999721834261884             # ClearScalar<float64>
         %7 = multiply(%6, %5)                 # EncryptedTensor<float64, shape=(1, 64)>
         %8 = [-0.026818 ... .00357294]        # ClearTensor<float32, shape=(64,)>
         %9 = add(%7, %8)                      # EncryptedTensor<float64, shape=(1, 64)>
        %10 = 0                                # ClearScalar<uint1>
        %11 = maximum(%9, %10)                 # EncryptedTensor<float64, shape=(1, 64)>
        %12 = 22.810754304030795               # ClearScalar<float64>
        %13 = divide(%11, %12)                 # EncryptedTensor<float64, shape=(1, 64)>
        %14 = 0                                # ClearScalar<uint1>
        %15 = add(%13, %14)                    # EncryptedTensor<float64, shape=(1, 64)>
        %16 = rint(%15)                        # EncryptedTensor<float64, shape=(1, 64)>
        %17 = 0                                # ClearScalar<uint1>
        %18 = 255                              # ClearScalar<uint8>
        %19 = clip(%16, %17, %18)              # EncryptedTensor<float64, shape=(1, 64)>
        %20 = astype(%19, dtype=int_)          # EncryptedTensor<uint1, shape=(1, 64)>
        return %20
